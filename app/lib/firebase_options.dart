// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static Future<FirebaseOptions> get currentPlatform async {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
            'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    await dotenv.load();
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_ANDROID_APIKEY', fallback: ''),
    appId: dotenv.get('FIREBASE_ANDROID_APPID', fallback: ''),
    messagingSenderId: dotenv.get('FIREBASE_ANDROID_MESSAGINGSENDERID', fallback: ''),
    projectId: dotenv.get('FIREBASE_ANDROID_PROJECTID', fallback: ''),
    storageBucket: dotenv.get('FIREBASE_ANDROID_STORAGEBUCKET', fallback: ''),
    androidClientId: dotenv.get('FIREBASE_ANDROID_ANDROIDCLIENTID', fallback: ''),
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_IOS_APIKEY', fallback: ''),
    appId: dotenv.get('FIREBASE_IOS_APPID', fallback: ''),
    messagingSenderId: dotenv.get('FIREBASE_IOS_MESSAGINGSENDERID', fallback: ''),
    projectId: dotenv.get('FIREBASE_IOS_PROJECTID', fallback: ''),
    storageBucket: dotenv.get('FIREBASE_IOS_STORAGEBUCKET', fallback: ''),
    androidClientId: dotenv.get('FIREBASE_IOS_ANDROIDCLIENTID', fallback: ''),
    iosClientId: dotenv.get('FIREBASE_IOS_IOSCLIENTID', fallback: ''),
    iosBundleId: dotenv.get('FIREBASE_IOS_IOSBUNDLEID', fallback: ''),
  );
}
